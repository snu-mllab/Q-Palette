#include <torch/extension.h>
void vq_pack_dequant_3_2_3_32_32(torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_1_3_2_3_32_32(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_2_3_2_3_32_32(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_4_3_2_3_32_32(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_8_3_2_3_32_32(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_dequant_3_2_6_32_64(torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_1_3_2_6_32_64(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_2_3_2_6_32_64(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_4_3_2_6_32_64(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_8_3_2_6_32_64(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_dequant_4_2_2_32_16(torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_1_4_2_2_32_16(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_2_4_2_2_32_16(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_4_4_2_2_32_16(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_8_4_2_2_32_16(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_dequant_4_2_4_32_32(torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_1_4_2_4_32_32(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_2_4_2_4_32_32(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_4_4_2_4_32_32(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_8_4_2_4_32_32(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_dequant_4_2_8_32_64(torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_1_4_2_8_32_64(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_2_4_2_8_32_64(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_4_4_2_8_32_64(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_8_4_2_8_32_64(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_dequant_5_2_5_32_32(torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_1_5_2_5_32_32(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_2_5_2_5_32_32(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_4_5_2_5_32_32(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_8_5_2_5_32_32(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_dequant_5_2_10_32_64(torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_1_5_2_10_32_64(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_2_5_2_10_32_64(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_4_5_2_10_32_64(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_8_5_2_10_32_64(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_dequant_6_2_3_32_16(torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_1_6_2_3_32_16(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_2_6_2_3_32_16(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_4_6_2_3_32_16(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_8_6_2_3_32_16(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_dequant_6_2_6_32_32(torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_1_6_2_6_32_32(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_2_6_2_6_32_32(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_4_6_2_6_32_32(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_8_6_2_6_32_32(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_dequant_6_2_12_32_64(torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_1_6_2_12_32_64(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_2_6_2_12_32_64(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_4_6_2_12_32_64(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_8_6_2_12_32_64(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_dequant_7_2_7_32_32(torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_1_7_2_7_32_32(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_2_7_2_7_32_32(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_4_7_2_7_32_32(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_8_7_2_7_32_32(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_dequant_7_2_14_32_64(torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_1_7_2_14_32_64(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_2_7_2_14_32_64(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_4_7_2_14_32_64(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_8_7_2_14_32_64(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_dequant_8_2_4_32_16(torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_1_8_2_4_32_16(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_2_8_2_4_32_16(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_4_8_2_4_32_16(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_8_8_2_4_32_16(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_dequant_8_2_8_32_32(torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_1_8_2_8_32_32(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_2_8_2_8_32_32(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_4_8_2_8_32_32(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_8_8_2_8_32_32(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_dequant_8_2_16_32_64(torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_1_8_2_16_32_64(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_2_8_2_16_32_64(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_4_8_2_16_32_64(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_8_8_2_16_32_64(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_dequant_9_2_9_32_32(torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_1_9_2_9_32_32(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_2_9_2_9_32_32(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_4_9_2_9_32_32(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_8_9_2_9_32_32(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_dequant_9_2_18_32_64(torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_1_9_2_18_32_64(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_2_9_2_18_32_64(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_4_9_2_18_32_64(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_8_9_2_18_32_64(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_dequant_10_2_5_32_16(torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_1_10_2_5_32_16(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_2_10_2_5_32_16(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_4_10_2_5_32_16(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_8_10_2_5_32_16(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_dequant_10_2_10_32_32(torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_1_10_2_10_32_32(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_2_10_2_10_32_32(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_4_10_2_10_32_32(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_8_10_2_10_32_32(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_dequant_10_2_20_32_64(torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_1_10_2_20_32_64(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_2_10_2_20_32_64(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_4_10_2_20_32_64(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_8_10_2_20_32_64(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_dequant_11_2_11_32_32(torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_1_11_2_11_32_32(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_2_11_2_11_32_32(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_4_11_2_11_32_32(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_8_11_2_11_32_32(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_dequant_11_2_22_32_64(torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_1_11_2_22_32_64(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_2_11_2_22_32_64(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_4_11_2_22_32_64(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_8_11_2_22_32_64(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_dequant_12_2_6_32_16(torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_1_12_2_6_32_16(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_2_12_2_6_32_16(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_4_12_2_6_32_16(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_8_12_2_6_32_16(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_dequant_12_2_12_32_32(torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_1_12_2_12_32_32(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_2_12_2_12_32_32(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_4_12_2_12_32_32(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_8_12_2_12_32_32(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_dequant_12_2_24_32_64(torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_1_12_2_24_32_64(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_2_12_2_24_32_64(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_4_12_2_24_32_64(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_8_12_2_24_32_64(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_dequant_6_4_3_32_32(torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_1_6_4_3_32_32(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_2_6_4_3_32_32(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_4_6_4_3_32_32(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_8_6_4_3_32_32(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_dequant_6_4_6_32_64(torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_1_6_4_6_32_64(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_2_6_4_6_32_64(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_4_6_4_6_32_64(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_8_6_4_6_32_64(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_dequant_7_4_7_32_64(torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_1_7_4_7_32_64(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_2_7_4_7_32_64(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_4_7_4_7_32_64(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_8_7_4_7_32_64(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_dequant_8_4_2_32_16(torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_1_8_4_2_32_16(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_2_8_4_2_32_16(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_4_8_4_2_32_16(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_8_8_4_2_32_16(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_dequant_8_4_4_32_32(torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_1_8_4_4_32_32(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_2_8_4_4_32_32(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_4_8_4_4_32_32(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_8_8_4_4_32_32(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_dequant_8_4_8_32_64(torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_1_8_4_8_32_64(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_2_8_4_8_32_64(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_4_8_4_8_32_64(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_8_8_4_8_32_64(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_dequant_9_4_9_32_64(torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_1_9_4_9_32_64(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_2_9_4_9_32_64(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_4_9_4_9_32_64(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_8_9_4_9_32_64(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_dequant_10_4_5_32_32(torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_1_10_4_5_32_32(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_2_10_4_5_32_32(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_4_10_4_5_32_32(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_8_10_4_5_32_32(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_dequant_10_4_10_32_64(torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_1_10_4_10_32_64(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_2_10_4_10_32_64(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_4_10_4_10_32_64(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_8_10_4_10_32_64(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_dequant_11_4_11_32_64(torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_1_11_4_11_32_64(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_2_11_4_11_32_64(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_4_11_4_11_32_64(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_8_11_4_11_32_64(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_dequant_12_4_3_32_16(torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_1_12_4_3_32_16(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_2_12_4_3_32_16(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_4_12_4_3_32_16(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_8_12_4_3_32_16(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_dequant_12_4_6_32_32(torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_1_12_4_6_32_32(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_2_12_4_6_32_32(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_4_12_4_6_32_32(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_8_12_4_6_32_32(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_dequant_12_4_12_32_64(torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_1_12_4_12_32_64(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_2_12_4_12_32_64(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_4_12_4_12_32_64(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);
void vq_pack_gemm_8_12_4_12_32_64(torch::Tensor in, torch::Tensor out, torch::Tensor qweight, torch::Tensor lut);

PYBIND11_MODULE(TORCH_EXTENSION_NAME, m) {
    m.def("vq_pack_dequant_3_2_3_32_32", &vq_pack_dequant_3_2_3_32_32, "vq_pack_dequant");
    m.def("vq_pack_gemm_1_3_2_3_32_32", &vq_pack_gemm_1_3_2_3_32_32, "vq_pack_gemm");
    m.def("vq_pack_gemm_2_3_2_3_32_32", &vq_pack_gemm_2_3_2_3_32_32, "vq_pack_gemm");
    m.def("vq_pack_gemm_4_3_2_3_32_32", &vq_pack_gemm_4_3_2_3_32_32, "vq_pack_gemm");
    m.def("vq_pack_gemm_8_3_2_3_32_32", &vq_pack_gemm_8_3_2_3_32_32, "vq_pack_gemm");
    m.def("vq_pack_dequant_3_2_6_32_64", &vq_pack_dequant_3_2_6_32_64, "vq_pack_dequant");
    m.def("vq_pack_gemm_1_3_2_6_32_64", &vq_pack_gemm_1_3_2_6_32_64, "vq_pack_gemm");
    m.def("vq_pack_gemm_2_3_2_6_32_64", &vq_pack_gemm_2_3_2_6_32_64, "vq_pack_gemm");
    m.def("vq_pack_gemm_4_3_2_6_32_64", &vq_pack_gemm_4_3_2_6_32_64, "vq_pack_gemm");
    m.def("vq_pack_gemm_8_3_2_6_32_64", &vq_pack_gemm_8_3_2_6_32_64, "vq_pack_gemm");
    m.def("vq_pack_dequant_4_2_2_32_16", &vq_pack_dequant_4_2_2_32_16, "vq_pack_dequant");
    m.def("vq_pack_gemm_1_4_2_2_32_16", &vq_pack_gemm_1_4_2_2_32_16, "vq_pack_gemm");
    m.def("vq_pack_gemm_2_4_2_2_32_16", &vq_pack_gemm_2_4_2_2_32_16, "vq_pack_gemm");
    m.def("vq_pack_gemm_4_4_2_2_32_16", &vq_pack_gemm_4_4_2_2_32_16, "vq_pack_gemm");
    m.def("vq_pack_gemm_8_4_2_2_32_16", &vq_pack_gemm_8_4_2_2_32_16, "vq_pack_gemm");
    m.def("vq_pack_dequant_4_2_4_32_32", &vq_pack_dequant_4_2_4_32_32, "vq_pack_dequant");
    m.def("vq_pack_gemm_1_4_2_4_32_32", &vq_pack_gemm_1_4_2_4_32_32, "vq_pack_gemm");
    m.def("vq_pack_gemm_2_4_2_4_32_32", &vq_pack_gemm_2_4_2_4_32_32, "vq_pack_gemm");
    m.def("vq_pack_gemm_4_4_2_4_32_32", &vq_pack_gemm_4_4_2_4_32_32, "vq_pack_gemm");
    m.def("vq_pack_gemm_8_4_2_4_32_32", &vq_pack_gemm_8_4_2_4_32_32, "vq_pack_gemm");
    m.def("vq_pack_dequant_4_2_8_32_64", &vq_pack_dequant_4_2_8_32_64, "vq_pack_dequant");
    m.def("vq_pack_gemm_1_4_2_8_32_64", &vq_pack_gemm_1_4_2_8_32_64, "vq_pack_gemm");
    m.def("vq_pack_gemm_2_4_2_8_32_64", &vq_pack_gemm_2_4_2_8_32_64, "vq_pack_gemm");
    m.def("vq_pack_gemm_4_4_2_8_32_64", &vq_pack_gemm_4_4_2_8_32_64, "vq_pack_gemm");
    m.def("vq_pack_gemm_8_4_2_8_32_64", &vq_pack_gemm_8_4_2_8_32_64, "vq_pack_gemm");
    m.def("vq_pack_dequant_5_2_5_32_32", &vq_pack_dequant_5_2_5_32_32, "vq_pack_dequant");
    m.def("vq_pack_gemm_1_5_2_5_32_32", &vq_pack_gemm_1_5_2_5_32_32, "vq_pack_gemm");
    m.def("vq_pack_gemm_2_5_2_5_32_32", &vq_pack_gemm_2_5_2_5_32_32, "vq_pack_gemm");
    m.def("vq_pack_gemm_4_5_2_5_32_32", &vq_pack_gemm_4_5_2_5_32_32, "vq_pack_gemm");
    m.def("vq_pack_gemm_8_5_2_5_32_32", &vq_pack_gemm_8_5_2_5_32_32, "vq_pack_gemm");
    m.def("vq_pack_dequant_5_2_10_32_64", &vq_pack_dequant_5_2_10_32_64, "vq_pack_dequant");
    m.def("vq_pack_gemm_1_5_2_10_32_64", &vq_pack_gemm_1_5_2_10_32_64, "vq_pack_gemm");
    m.def("vq_pack_gemm_2_5_2_10_32_64", &vq_pack_gemm_2_5_2_10_32_64, "vq_pack_gemm");
    m.def("vq_pack_gemm_4_5_2_10_32_64", &vq_pack_gemm_4_5_2_10_32_64, "vq_pack_gemm");
    m.def("vq_pack_gemm_8_5_2_10_32_64", &vq_pack_gemm_8_5_2_10_32_64, "vq_pack_gemm");
    m.def("vq_pack_dequant_6_2_3_32_16", &vq_pack_dequant_6_2_3_32_16, "vq_pack_dequant");
    m.def("vq_pack_gemm_1_6_2_3_32_16", &vq_pack_gemm_1_6_2_3_32_16, "vq_pack_gemm");
    m.def("vq_pack_gemm_2_6_2_3_32_16", &vq_pack_gemm_2_6_2_3_32_16, "vq_pack_gemm");
    m.def("vq_pack_gemm_4_6_2_3_32_16", &vq_pack_gemm_4_6_2_3_32_16, "vq_pack_gemm");
    m.def("vq_pack_gemm_8_6_2_3_32_16", &vq_pack_gemm_8_6_2_3_32_16, "vq_pack_gemm");
    m.def("vq_pack_dequant_6_2_6_32_32", &vq_pack_dequant_6_2_6_32_32, "vq_pack_dequant");
    m.def("vq_pack_gemm_1_6_2_6_32_32", &vq_pack_gemm_1_6_2_6_32_32, "vq_pack_gemm");
    m.def("vq_pack_gemm_2_6_2_6_32_32", &vq_pack_gemm_2_6_2_6_32_32, "vq_pack_gemm");
    m.def("vq_pack_gemm_4_6_2_6_32_32", &vq_pack_gemm_4_6_2_6_32_32, "vq_pack_gemm");
    m.def("vq_pack_gemm_8_6_2_6_32_32", &vq_pack_gemm_8_6_2_6_32_32, "vq_pack_gemm");
    m.def("vq_pack_dequant_6_2_12_32_64", &vq_pack_dequant_6_2_12_32_64, "vq_pack_dequant");
    m.def("vq_pack_gemm_1_6_2_12_32_64", &vq_pack_gemm_1_6_2_12_32_64, "vq_pack_gemm");
    m.def("vq_pack_gemm_2_6_2_12_32_64", &vq_pack_gemm_2_6_2_12_32_64, "vq_pack_gemm");
    m.def("vq_pack_gemm_4_6_2_12_32_64", &vq_pack_gemm_4_6_2_12_32_64, "vq_pack_gemm");
    m.def("vq_pack_gemm_8_6_2_12_32_64", &vq_pack_gemm_8_6_2_12_32_64, "vq_pack_gemm");
    m.def("vq_pack_dequant_7_2_7_32_32", &vq_pack_dequant_7_2_7_32_32, "vq_pack_dequant");
    m.def("vq_pack_gemm_1_7_2_7_32_32", &vq_pack_gemm_1_7_2_7_32_32, "vq_pack_gemm");
    m.def("vq_pack_gemm_2_7_2_7_32_32", &vq_pack_gemm_2_7_2_7_32_32, "vq_pack_gemm");
    m.def("vq_pack_gemm_4_7_2_7_32_32", &vq_pack_gemm_4_7_2_7_32_32, "vq_pack_gemm");
    m.def("vq_pack_gemm_8_7_2_7_32_32", &vq_pack_gemm_8_7_2_7_32_32, "vq_pack_gemm");
    m.def("vq_pack_dequant_7_2_14_32_64", &vq_pack_dequant_7_2_14_32_64, "vq_pack_dequant");
    m.def("vq_pack_gemm_1_7_2_14_32_64", &vq_pack_gemm_1_7_2_14_32_64, "vq_pack_gemm");
    m.def("vq_pack_gemm_2_7_2_14_32_64", &vq_pack_gemm_2_7_2_14_32_64, "vq_pack_gemm");
    m.def("vq_pack_gemm_4_7_2_14_32_64", &vq_pack_gemm_4_7_2_14_32_64, "vq_pack_gemm");
    m.def("vq_pack_gemm_8_7_2_14_32_64", &vq_pack_gemm_8_7_2_14_32_64, "vq_pack_gemm");
    m.def("vq_pack_dequant_8_2_4_32_16", &vq_pack_dequant_8_2_4_32_16, "vq_pack_dequant");
    m.def("vq_pack_gemm_1_8_2_4_32_16", &vq_pack_gemm_1_8_2_4_32_16, "vq_pack_gemm");
    m.def("vq_pack_gemm_2_8_2_4_32_16", &vq_pack_gemm_2_8_2_4_32_16, "vq_pack_gemm");
    m.def("vq_pack_gemm_4_8_2_4_32_16", &vq_pack_gemm_4_8_2_4_32_16, "vq_pack_gemm");
    m.def("vq_pack_gemm_8_8_2_4_32_16", &vq_pack_gemm_8_8_2_4_32_16, "vq_pack_gemm");
    m.def("vq_pack_dequant_8_2_8_32_32", &vq_pack_dequant_8_2_8_32_32, "vq_pack_dequant");
    m.def("vq_pack_gemm_1_8_2_8_32_32", &vq_pack_gemm_1_8_2_8_32_32, "vq_pack_gemm");
    m.def("vq_pack_gemm_2_8_2_8_32_32", &vq_pack_gemm_2_8_2_8_32_32, "vq_pack_gemm");
    m.def("vq_pack_gemm_4_8_2_8_32_32", &vq_pack_gemm_4_8_2_8_32_32, "vq_pack_gemm");
    m.def("vq_pack_gemm_8_8_2_8_32_32", &vq_pack_gemm_8_8_2_8_32_32, "vq_pack_gemm");
    m.def("vq_pack_dequant_8_2_16_32_64", &vq_pack_dequant_8_2_16_32_64, "vq_pack_dequant");
    m.def("vq_pack_gemm_1_8_2_16_32_64", &vq_pack_gemm_1_8_2_16_32_64, "vq_pack_gemm");
    m.def("vq_pack_gemm_2_8_2_16_32_64", &vq_pack_gemm_2_8_2_16_32_64, "vq_pack_gemm");
    m.def("vq_pack_gemm_4_8_2_16_32_64", &vq_pack_gemm_4_8_2_16_32_64, "vq_pack_gemm");
    m.def("vq_pack_gemm_8_8_2_16_32_64", &vq_pack_gemm_8_8_2_16_32_64, "vq_pack_gemm");
    m.def("vq_pack_dequant_9_2_9_32_32", &vq_pack_dequant_9_2_9_32_32, "vq_pack_dequant");
    m.def("vq_pack_gemm_1_9_2_9_32_32", &vq_pack_gemm_1_9_2_9_32_32, "vq_pack_gemm");
    m.def("vq_pack_gemm_2_9_2_9_32_32", &vq_pack_gemm_2_9_2_9_32_32, "vq_pack_gemm");
    m.def("vq_pack_gemm_4_9_2_9_32_32", &vq_pack_gemm_4_9_2_9_32_32, "vq_pack_gemm");
    m.def("vq_pack_gemm_8_9_2_9_32_32", &vq_pack_gemm_8_9_2_9_32_32, "vq_pack_gemm");
    m.def("vq_pack_dequant_9_2_18_32_64", &vq_pack_dequant_9_2_18_32_64, "vq_pack_dequant");
    m.def("vq_pack_gemm_1_9_2_18_32_64", &vq_pack_gemm_1_9_2_18_32_64, "vq_pack_gemm");
    m.def("vq_pack_gemm_2_9_2_18_32_64", &vq_pack_gemm_2_9_2_18_32_64, "vq_pack_gemm");
    m.def("vq_pack_gemm_4_9_2_18_32_64", &vq_pack_gemm_4_9_2_18_32_64, "vq_pack_gemm");
    m.def("vq_pack_gemm_8_9_2_18_32_64", &vq_pack_gemm_8_9_2_18_32_64, "vq_pack_gemm");
    m.def("vq_pack_dequant_10_2_5_32_16", &vq_pack_dequant_10_2_5_32_16, "vq_pack_dequant");
    m.def("vq_pack_gemm_1_10_2_5_32_16", &vq_pack_gemm_1_10_2_5_32_16, "vq_pack_gemm");
    m.def("vq_pack_gemm_2_10_2_5_32_16", &vq_pack_gemm_2_10_2_5_32_16, "vq_pack_gemm");
    m.def("vq_pack_gemm_4_10_2_5_32_16", &vq_pack_gemm_4_10_2_5_32_16, "vq_pack_gemm");
    m.def("vq_pack_gemm_8_10_2_5_32_16", &vq_pack_gemm_8_10_2_5_32_16, "vq_pack_gemm");
    m.def("vq_pack_dequant_10_2_10_32_32", &vq_pack_dequant_10_2_10_32_32, "vq_pack_dequant");
    m.def("vq_pack_gemm_1_10_2_10_32_32", &vq_pack_gemm_1_10_2_10_32_32, "vq_pack_gemm");
    m.def("vq_pack_gemm_2_10_2_10_32_32", &vq_pack_gemm_2_10_2_10_32_32, "vq_pack_gemm");
    m.def("vq_pack_gemm_4_10_2_10_32_32", &vq_pack_gemm_4_10_2_10_32_32, "vq_pack_gemm");
    m.def("vq_pack_gemm_8_10_2_10_32_32", &vq_pack_gemm_8_10_2_10_32_32, "vq_pack_gemm");
    m.def("vq_pack_dequant_10_2_20_32_64", &vq_pack_dequant_10_2_20_32_64, "vq_pack_dequant");
    m.def("vq_pack_gemm_1_10_2_20_32_64", &vq_pack_gemm_1_10_2_20_32_64, "vq_pack_gemm");
    m.def("vq_pack_gemm_2_10_2_20_32_64", &vq_pack_gemm_2_10_2_20_32_64, "vq_pack_gemm");
    m.def("vq_pack_gemm_4_10_2_20_32_64", &vq_pack_gemm_4_10_2_20_32_64, "vq_pack_gemm");
    m.def("vq_pack_gemm_8_10_2_20_32_64", &vq_pack_gemm_8_10_2_20_32_64, "vq_pack_gemm");
    m.def("vq_pack_dequant_11_2_11_32_32", &vq_pack_dequant_11_2_11_32_32, "vq_pack_dequant");
    m.def("vq_pack_gemm_1_11_2_11_32_32", &vq_pack_gemm_1_11_2_11_32_32, "vq_pack_gemm");
    m.def("vq_pack_gemm_2_11_2_11_32_32", &vq_pack_gemm_2_11_2_11_32_32, "vq_pack_gemm");
    m.def("vq_pack_gemm_4_11_2_11_32_32", &vq_pack_gemm_4_11_2_11_32_32, "vq_pack_gemm");
    m.def("vq_pack_gemm_8_11_2_11_32_32", &vq_pack_gemm_8_11_2_11_32_32, "vq_pack_gemm");
    m.def("vq_pack_dequant_11_2_22_32_64", &vq_pack_dequant_11_2_22_32_64, "vq_pack_dequant");
    m.def("vq_pack_gemm_1_11_2_22_32_64", &vq_pack_gemm_1_11_2_22_32_64, "vq_pack_gemm");
    m.def("vq_pack_gemm_2_11_2_22_32_64", &vq_pack_gemm_2_11_2_22_32_64, "vq_pack_gemm");
    m.def("vq_pack_gemm_4_11_2_22_32_64", &vq_pack_gemm_4_11_2_22_32_64, "vq_pack_gemm");
    m.def("vq_pack_gemm_8_11_2_22_32_64", &vq_pack_gemm_8_11_2_22_32_64, "vq_pack_gemm");
    m.def("vq_pack_dequant_12_2_6_32_16", &vq_pack_dequant_12_2_6_32_16, "vq_pack_dequant");
    m.def("vq_pack_gemm_1_12_2_6_32_16", &vq_pack_gemm_1_12_2_6_32_16, "vq_pack_gemm");
    m.def("vq_pack_gemm_2_12_2_6_32_16", &vq_pack_gemm_2_12_2_6_32_16, "vq_pack_gemm");
    m.def("vq_pack_gemm_4_12_2_6_32_16", &vq_pack_gemm_4_12_2_6_32_16, "vq_pack_gemm");
    m.def("vq_pack_gemm_8_12_2_6_32_16", &vq_pack_gemm_8_12_2_6_32_16, "vq_pack_gemm");
    m.def("vq_pack_dequant_12_2_12_32_32", &vq_pack_dequant_12_2_12_32_32, "vq_pack_dequant");
    m.def("vq_pack_gemm_1_12_2_12_32_32", &vq_pack_gemm_1_12_2_12_32_32, "vq_pack_gemm");
    m.def("vq_pack_gemm_2_12_2_12_32_32", &vq_pack_gemm_2_12_2_12_32_32, "vq_pack_gemm");
    m.def("vq_pack_gemm_4_12_2_12_32_32", &vq_pack_gemm_4_12_2_12_32_32, "vq_pack_gemm");
    m.def("vq_pack_gemm_8_12_2_12_32_32", &vq_pack_gemm_8_12_2_12_32_32, "vq_pack_gemm");
    m.def("vq_pack_dequant_12_2_24_32_64", &vq_pack_dequant_12_2_24_32_64, "vq_pack_dequant");
    m.def("vq_pack_gemm_1_12_2_24_32_64", &vq_pack_gemm_1_12_2_24_32_64, "vq_pack_gemm");
    m.def("vq_pack_gemm_2_12_2_24_32_64", &vq_pack_gemm_2_12_2_24_32_64, "vq_pack_gemm");
    m.def("vq_pack_gemm_4_12_2_24_32_64", &vq_pack_gemm_4_12_2_24_32_64, "vq_pack_gemm");
    m.def("vq_pack_gemm_8_12_2_24_32_64", &vq_pack_gemm_8_12_2_24_32_64, "vq_pack_gemm");
    m.def("vq_pack_dequant_6_4_3_32_32", &vq_pack_dequant_6_4_3_32_32, "vq_pack_dequant");
    m.def("vq_pack_gemm_1_6_4_3_32_32", &vq_pack_gemm_1_6_4_3_32_32, "vq_pack_gemm");
    m.def("vq_pack_gemm_2_6_4_3_32_32", &vq_pack_gemm_2_6_4_3_32_32, "vq_pack_gemm");
    m.def("vq_pack_gemm_4_6_4_3_32_32", &vq_pack_gemm_4_6_4_3_32_32, "vq_pack_gemm");
    m.def("vq_pack_gemm_8_6_4_3_32_32", &vq_pack_gemm_8_6_4_3_32_32, "vq_pack_gemm");
    m.def("vq_pack_dequant_6_4_6_32_64", &vq_pack_dequant_6_4_6_32_64, "vq_pack_dequant");
    m.def("vq_pack_gemm_1_6_4_6_32_64", &vq_pack_gemm_1_6_4_6_32_64, "vq_pack_gemm");
    m.def("vq_pack_gemm_2_6_4_6_32_64", &vq_pack_gemm_2_6_4_6_32_64, "vq_pack_gemm");
    m.def("vq_pack_gemm_4_6_4_6_32_64", &vq_pack_gemm_4_6_4_6_32_64, "vq_pack_gemm");
    m.def("vq_pack_gemm_8_6_4_6_32_64", &vq_pack_gemm_8_6_4_6_32_64, "vq_pack_gemm");
    m.def("vq_pack_dequant_7_4_7_32_64", &vq_pack_dequant_7_4_7_32_64, "vq_pack_dequant");
    m.def("vq_pack_gemm_1_7_4_7_32_64", &vq_pack_gemm_1_7_4_7_32_64, "vq_pack_gemm");
    m.def("vq_pack_gemm_2_7_4_7_32_64", &vq_pack_gemm_2_7_4_7_32_64, "vq_pack_gemm");
    m.def("vq_pack_gemm_4_7_4_7_32_64", &vq_pack_gemm_4_7_4_7_32_64, "vq_pack_gemm");
    m.def("vq_pack_gemm_8_7_4_7_32_64", &vq_pack_gemm_8_7_4_7_32_64, "vq_pack_gemm");
    m.def("vq_pack_dequant_8_4_2_32_16", &vq_pack_dequant_8_4_2_32_16, "vq_pack_dequant");
    m.def("vq_pack_gemm_1_8_4_2_32_16", &vq_pack_gemm_1_8_4_2_32_16, "vq_pack_gemm");
    m.def("vq_pack_gemm_2_8_4_2_32_16", &vq_pack_gemm_2_8_4_2_32_16, "vq_pack_gemm");
    m.def("vq_pack_gemm_4_8_4_2_32_16", &vq_pack_gemm_4_8_4_2_32_16, "vq_pack_gemm");
    m.def("vq_pack_gemm_8_8_4_2_32_16", &vq_pack_gemm_8_8_4_2_32_16, "vq_pack_gemm");
    m.def("vq_pack_dequant_8_4_4_32_32", &vq_pack_dequant_8_4_4_32_32, "vq_pack_dequant");
    m.def("vq_pack_gemm_1_8_4_4_32_32", &vq_pack_gemm_1_8_4_4_32_32, "vq_pack_gemm");
    m.def("vq_pack_gemm_2_8_4_4_32_32", &vq_pack_gemm_2_8_4_4_32_32, "vq_pack_gemm");
    m.def("vq_pack_gemm_4_8_4_4_32_32", &vq_pack_gemm_4_8_4_4_32_32, "vq_pack_gemm");
    m.def("vq_pack_gemm_8_8_4_4_32_32", &vq_pack_gemm_8_8_4_4_32_32, "vq_pack_gemm");
    m.def("vq_pack_dequant_8_4_8_32_64", &vq_pack_dequant_8_4_8_32_64, "vq_pack_dequant");
    m.def("vq_pack_gemm_1_8_4_8_32_64", &vq_pack_gemm_1_8_4_8_32_64, "vq_pack_gemm");
    m.def("vq_pack_gemm_2_8_4_8_32_64", &vq_pack_gemm_2_8_4_8_32_64, "vq_pack_gemm");
    m.def("vq_pack_gemm_4_8_4_8_32_64", &vq_pack_gemm_4_8_4_8_32_64, "vq_pack_gemm");
    m.def("vq_pack_gemm_8_8_4_8_32_64", &vq_pack_gemm_8_8_4_8_32_64, "vq_pack_gemm");
    m.def("vq_pack_dequant_9_4_9_32_64", &vq_pack_dequant_9_4_9_32_64, "vq_pack_dequant");
    m.def("vq_pack_gemm_1_9_4_9_32_64", &vq_pack_gemm_1_9_4_9_32_64, "vq_pack_gemm");
    m.def("vq_pack_gemm_2_9_4_9_32_64", &vq_pack_gemm_2_9_4_9_32_64, "vq_pack_gemm");
    m.def("vq_pack_gemm_4_9_4_9_32_64", &vq_pack_gemm_4_9_4_9_32_64, "vq_pack_gemm");
    m.def("vq_pack_gemm_8_9_4_9_32_64", &vq_pack_gemm_8_9_4_9_32_64, "vq_pack_gemm");
    m.def("vq_pack_dequant_10_4_5_32_32", &vq_pack_dequant_10_4_5_32_32, "vq_pack_dequant");
    m.def("vq_pack_gemm_1_10_4_5_32_32", &vq_pack_gemm_1_10_4_5_32_32, "vq_pack_gemm");
    m.def("vq_pack_gemm_2_10_4_5_32_32", &vq_pack_gemm_2_10_4_5_32_32, "vq_pack_gemm");
    m.def("vq_pack_gemm_4_10_4_5_32_32", &vq_pack_gemm_4_10_4_5_32_32, "vq_pack_gemm");
    m.def("vq_pack_gemm_8_10_4_5_32_32", &vq_pack_gemm_8_10_4_5_32_32, "vq_pack_gemm");
    m.def("vq_pack_dequant_10_4_10_32_64", &vq_pack_dequant_10_4_10_32_64, "vq_pack_dequant");
    m.def("vq_pack_gemm_1_10_4_10_32_64", &vq_pack_gemm_1_10_4_10_32_64, "vq_pack_gemm");
    m.def("vq_pack_gemm_2_10_4_10_32_64", &vq_pack_gemm_2_10_4_10_32_64, "vq_pack_gemm");
    m.def("vq_pack_gemm_4_10_4_10_32_64", &vq_pack_gemm_4_10_4_10_32_64, "vq_pack_gemm");
    m.def("vq_pack_gemm_8_10_4_10_32_64", &vq_pack_gemm_8_10_4_10_32_64, "vq_pack_gemm");
    m.def("vq_pack_dequant_11_4_11_32_64", &vq_pack_dequant_11_4_11_32_64, "vq_pack_dequant");
    m.def("vq_pack_gemm_1_11_4_11_32_64", &vq_pack_gemm_1_11_4_11_32_64, "vq_pack_gemm");
    m.def("vq_pack_gemm_2_11_4_11_32_64", &vq_pack_gemm_2_11_4_11_32_64, "vq_pack_gemm");
    m.def("vq_pack_gemm_4_11_4_11_32_64", &vq_pack_gemm_4_11_4_11_32_64, "vq_pack_gemm");
    m.def("vq_pack_gemm_8_11_4_11_32_64", &vq_pack_gemm_8_11_4_11_32_64, "vq_pack_gemm");
    m.def("vq_pack_dequant_12_4_3_32_16", &vq_pack_dequant_12_4_3_32_16, "vq_pack_dequant");
    m.def("vq_pack_gemm_1_12_4_3_32_16", &vq_pack_gemm_1_12_4_3_32_16, "vq_pack_gemm");
    m.def("vq_pack_gemm_2_12_4_3_32_16", &vq_pack_gemm_2_12_4_3_32_16, "vq_pack_gemm");
    m.def("vq_pack_gemm_4_12_4_3_32_16", &vq_pack_gemm_4_12_4_3_32_16, "vq_pack_gemm");
    m.def("vq_pack_gemm_8_12_4_3_32_16", &vq_pack_gemm_8_12_4_3_32_16, "vq_pack_gemm");
    m.def("vq_pack_dequant_12_4_6_32_32", &vq_pack_dequant_12_4_6_32_32, "vq_pack_dequant");
    m.def("vq_pack_gemm_1_12_4_6_32_32", &vq_pack_gemm_1_12_4_6_32_32, "vq_pack_gemm");
    m.def("vq_pack_gemm_2_12_4_6_32_32", &vq_pack_gemm_2_12_4_6_32_32, "vq_pack_gemm");
    m.def("vq_pack_gemm_4_12_4_6_32_32", &vq_pack_gemm_4_12_4_6_32_32, "vq_pack_gemm");
    m.def("vq_pack_gemm_8_12_4_6_32_32", &vq_pack_gemm_8_12_4_6_32_32, "vq_pack_gemm");
    m.def("vq_pack_dequant_12_4_12_32_64", &vq_pack_dequant_12_4_12_32_64, "vq_pack_dequant");
    m.def("vq_pack_gemm_1_12_4_12_32_64", &vq_pack_gemm_1_12_4_12_32_64, "vq_pack_gemm");
    m.def("vq_pack_gemm_2_12_4_12_32_64", &vq_pack_gemm_2_12_4_12_32_64, "vq_pack_gemm");
    m.def("vq_pack_gemm_4_12_4_12_32_64", &vq_pack_gemm_4_12_4_12_32_64, "vq_pack_gemm");
    m.def("vq_pack_gemm_8_12_4_12_32_64", &vq_pack_gemm_8_12_4_12_32_64, "vq_pack_gemm");
}